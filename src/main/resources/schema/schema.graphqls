type Query{
    me:User
#根据用户名查看用户描述信息（可以看到当前登陆的用户是否关注了名为username的用户）
    profile(username:String!):ProfilePayload
    #得到所有的tags
    tags:[Tag]
}


type Mutation{
    createUser(input:CreateUserInput):UserResult
    login(password:String!,email:String!):UserPayload
    updateUser(changes:UpdateUserInput!):UserPayload
#    将当前登陆用户关注名称为username的用户
    followUser(username:String!):ProfilePayload
#    当前登陆用户取消关注名称为username的用户
    unfollowUser(username:String!):ProfilePayload

}

union UserResult=UserPayload | Error

input CreateUserInput{
    email:String!
    username:String!
    password:String!
}
input UpdateUserInput{
    username:String
    email:String
    password:String
    bio:String
    images:String
}

type UserPayload{
    #操作？？？？？不加操作返回查询不到user
    user:User
}
type User{
    username:String!
    email:String!
    #获得形象描述
    profile:Profile!
    token:String!
}
#形象描述
type Profile{
    username:String!
    bio:String
    following:Boolean!
    image:String


}
type ProfilePayload{
    profile:Profile
}

type Tag{
   id:ID
    name:String
}


type Error{
    message:String
    errors:[ErrorItem!]
}
type ErrorItem{
    key:String!
    value:[String!]
}